name: Autonomous Sync - Zero Cost Cloud Workflow

on:
  schedule:
    # Configureerbaar via SYNC_CRON_SCHEDULE (default: hourly)
    # Format: minute hour day month weekday
    # Examples:
    #   - '0 * * * *'    = Every hour at :00
    #   - '0 */2 * * *'  = Every 2 hours
    #   - '0 0,6,12,18 * * *' = Every 6 hours (00:00, 06:00, 12:00, 18:00)
    #   - '0 8 * * *'    = Daily at 08:00
    - cron: '0 * * * *' # Hourly by default
  workflow_dispatch: # Manual trigger
    inputs:
      clubId:
        description: 'Club ID to sync (default: 11818)'
        required: false
        default: '11818'
      riderIds:
        description: 'Comma-separated rider IDs (optional)'
        required: false
      enableEventScraping:
        description: 'Enable event scraping'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  sync-data:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    env:
      # Supabase credentials (from GitHub Secrets)
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      # Zwift API credentials
      ZWIFT_API_KEY: ${{ secrets.ZWIFT_API_KEY }}
      ZWIFT_API_BASE_URL: https://zwift-ranking.herokuapp.com
      ZWIFT_CLUB_ID: ${{ github.event.inputs.clubId || '11818' }}
      
      # Sync configuration
      SYNC_INTERVAL_HOURS: 1
      EVENT_SCRAPING_ENABLED: ${{ github.event.inputs.enableEventScraping || 'true' }}
      EVENT_SCRAPING_DAYS: 90
      
      # Database
      DATABASE_URL: ${{ secrets.SUPABASE_DATABASE_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Verify Supabase connection
        run: |
          echo "🔌 Testing Supabase connection..."
          node -e "
            import('${{ github.workspace }}/src/services/supabase-client.js').then(({ default: getSupabaseClient }) => {
              const client = getSupabaseClient();
              if (!client) {
                console.error('❌ Supabase client initialization failed');
                process.exit(1);
              }
              console.log('✅ Supabase connected');
            }).catch(err => {
              console.error('❌ Connection error:', err.message);
              process.exit(1);
            });
          "

      - name: Sync club members
        id: sync-club
        run: |
          echo "🔄 Syncing club ${{ env.ZWIFT_CLUB_ID }}..."
          npx tsx scripts/sync-club.ts ${{ env.ZWIFT_CLUB_ID }} || {
            echo "❌ Club sync failed"
            exit 1
          }

      - name: Sync custom riders (if provided)
        if: github.event.inputs.riderIds != ''
        run: |
          echo "🔄 Syncing custom riders: ${{ github.event.inputs.riderIds }}..."
          IFS=',' read -ra RIDER_IDS <<< "${{ github.event.inputs.riderIds }}"
          
          for RIDER_ID in "${RIDER_IDS[@]}"; do
            echo "  Processing rider $RIDER_ID..."
            npx tsx scripts/sync-rider.ts "$RIDER_ID" || echo "  ⚠️  Failed to sync rider $RIDER_ID"
          done

      - name: Scrape events from riders
        if: env.EVENT_SCRAPING_ENABLED == 'true'
        run: |
          echo "🕷️  Event scraping enabled - scraping last ${{ env.EVENT_SCRAPING_DAYS }} days..."
          npx tsx scripts/scrape-events.ts || {
            echo "⚠️  Event scraping failed (non-critical)"
          }

      - name: Get final statistics
        run: |
          echo "📊 Database statistics:"
          npx tsx scripts/get-stats.ts

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Sync workflow failed"
          echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Run ID: ${{ github.run_id }}"
          echo "Club ID: ${{ env.ZWIFT_CLUB_ID }}"
          # TODO: Add Slack/Discord webhook notification
